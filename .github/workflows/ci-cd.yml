name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: 'lts/*'

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Job 4: Deploy (only on main/master branch and if tests pass)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          # Install Vercel CLI
          npm install -g vercel@latest

          # Deploy to production
          echo "Deploying to Vercel Production..."

          if DEPLOYMENT_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes 2>&1); then
            # Extract the last line which should be the URL
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_URL" | tail -1)
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "‚úÖ Production deployment successful: $DEPLOYMENT_URL"
          else
            echo "‚ùå Production deployment failed: $DEPLOYMENT_URL"
            exit 1
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Job 5: Deploy Preview (PRs only)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    outputs:
      preview-url: ${{ steps.deploy-preview.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to Vercel Preview
        id: deploy-preview
        run: |
          # Install Vercel CLI
          npm install -g vercel@latest

          # Link the project (if not already linked)
          echo "Deploying to Vercel..."

          # Deploy to preview - capture both URL and potential errors
          if PREVIEW_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} --yes 2>&1); then
            # Extract the last line which should be the URL
            PREVIEW_URL=$(echo "$PREVIEW_URL" | tail -1)
            echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
            echo "‚úÖ Deployment successful: $PREVIEW_URL"
          else
            echo "‚ùå Deployment failed: $PREVIEW_URL"
            echo "error=true" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment Preview URL
        uses: actions/github-script@v7
        if: steps.deploy-preview.outcome == 'success'
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Preview deployment ready!**
                
                Preview URL: ${{ steps.deploy-preview.outputs.url }}
                
                You can now manually test the preview deployment.`
              });
            } catch (error) {
              console.log('Failed to post comment:', error.message);
            }

      - name: Handle deployment failure
        if: steps.deploy-preview.outcome == 'failure'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Preview deployment failed**
                
                Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
                
                Common issues:
                - Check that VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID secrets are correctly set
                - Ensure the Vercel project exists and is linked to this repository`
              });
            } catch (error) {
              console.log('Failed to post failure comment:', error.message);
            }
